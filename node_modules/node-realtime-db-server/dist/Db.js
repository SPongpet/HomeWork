'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Memory = require('./adapters/Memory');

var _Memory2 = _interopRequireDefault(_Memory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var eventPrifix = '$rtdb$';
var userPath = 'user';

var Db = function () {
  function Db(io, dbOptions) {
    var _this = this;

    _classCallCheck(this, Db);

    var _dbOptions$Adapter = dbOptions.Adapter,
        Adapter = _dbOptions$Adapter === undefined ? _Memory2.default : _dbOptions$Adapter,
        _dbOptions$auth = dbOptions.auth,
        auth = _dbOptions$auth === undefined ? function () {
      return true;
    } : _dbOptions$auth,
        _dbOptions$onChange = dbOptions.onChange,
        onChange = _dbOptions$onChange === undefined ? function () {} : _dbOptions$onChange;


    this.io = io;
    this.adapter = new Adapter(dbOptions);
    this.auth = auth;
    this.io.on('connection', function (socket) {
      socket.rtdb = new _Memory2.default({});
      socket.on(eventPrifix + 'get', function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(eventData) {
          var _eventData$path, path, _value, value;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _this.doAuth(socket, eventPrifix + 'get', eventData);

                case 2:
                  if (_context.sent) {
                    _context.next = 4;
                    break;
                  }

                  return _context.abrupt('return');

                case 4:
                  _eventData$path = eventData.path, path = _eventData$path === undefined ? '' : _eventData$path;

                  //user data

                  if (!path.startsWith(userPath)) {
                    _context.next = 10;
                    break;
                  }

                  _context.next = 8;
                  return socket.rtdb.get(path);

                case 8:
                  _value = _context.sent;

                  socket.emit(eventPrifix + 'get', {
                    path: path,
                    value: _value
                  });

                case 10:
                  _context.next = 12;
                  return _this.get(path);

                case 12:
                  value = _context.sent;

                  _this.io.emit(eventPrifix + 'get', {
                    path: path,
                    value: value
                  });

                case 14:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, _this);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());

      socket.on(eventPrifix + 'set', function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(eventData) {
          var _eventData$path2, path, value, option, newValue, val;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this.doAuth(socket, eventPrifix + 'set', eventData);

                case 2:
                  if (_context2.sent) {
                    _context2.next = 4;
                    break;
                  }

                  return _context2.abrupt('return');

                case 4:
                  _eventData$path2 = eventData.path, path = _eventData$path2 === undefined ? '' : _eventData$path2, value = eventData.value, option = eventData.option;

                  //user data

                  if (!path.startsWith(userPath)) {
                    _context2.next = 12;
                    break;
                  }

                  _context2.next = 8;
                  return socket.rtdb.set(path, value, option);

                case 8:
                  newValue = _context2.sent;

                  socket.emit(eventPrifix + 'update', {
                    path: path,
                    value: newValue
                  });
                  //onChange
                  onChange(_this, socket, path, newValue);
                  return _context2.abrupt('return');

                case 12:
                  _context2.next = 14;
                  return _this.set(path, value, option);

                case 14:
                  val = _context2.sent;

                  _this.io.emit(eventPrifix + 'set', {
                    path: path,
                    value: val
                  });

                  //onChange
                  onChange(_this, socket, path, val);

                case 17:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, _this);
        }));

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }());
    });
  }

  _createClass(Db, [{
    key: 'set',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(path, value, option) {
        var newValue;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.adapter.set(path, value, option);

              case 2:
                newValue = _context3.sent;

                this.io.emit(eventPrifix + 'update', {
                  path: path,
                  value: newValue
                });
                return _context3.abrupt('return', newValue);

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function set(_x3, _x4, _x5) {
        return _ref3.apply(this, arguments);
      }

      return set;
    }()
  }, {
    key: 'get',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(path) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.adapter.get(path);

              case 2:
                return _context4.abrupt('return', _context4.sent);

              case 3:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function get(_x6) {
        return _ref4.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: 'doAuth',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(socket, event, eventData) {
        var _this2 = this;

        var authit, rtn;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                authit = function authit() {
                  return new Promise(function (resolve, reject) {
                    var rtn = _this2.auth(socket.rtdb.data.user, event, eventData, _this2);
                    if (rtn.then) {
                      rtn.then(resolve).catch(reject);
                    } else {
                      resolve(rtn);
                    }
                  });
                };

                _context5.next = 3;
                return authit();

              case 3:
                rtn = _context5.sent;

                if (rtn) {
                  _context5.next = 7;
                  break;
                }

                socket.emit(event, _extends({}, eventData, {
                  error: 'auth fail'
                }));
                return _context5.abrupt('return', false);

              case 7:
                return _context5.abrupt('return', true);

              case 8:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function doAuth(_x7, _x8, _x9) {
        return _ref5.apply(this, arguments);
      }

      return doAuth;
    }()
  }]);

  return Db;
}();

exports.default = Db;