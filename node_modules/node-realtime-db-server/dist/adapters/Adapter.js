'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _operations = require('../operations');

var _operations2 = _interopRequireDefault(_operations);

var _fn2async = require('../utils/fn2async');

var _fn2async2 = _interopRequireDefault(_fn2async);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Adapter = function () {
  function Adapter() {
    var dbOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Adapter);

    this._operationMap = this.getOriginalHandles(dbOptions);
    this.lock = false;
    this.useLock = dbOptions.useLock;
    this.lockRetryTimeout = dbOptions.lockRetryTimeout || 100;
  }

  _createClass(Adapter, [{
    key: 'set',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(path, value, option) {
        var _this = this;

        var op, rtn;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.useLock) {
                  _context.next = 7;
                  break;
                }

              case 1:
                if (!this.lock) {
                  _context.next = 6;
                  break;
                }

                _context.next = 4;
                return new Promise(function (resolve) {
                  return setTimeout(function () {
                    return resolve();
                  }, _this.lockRetryTimeout);
                });

              case 4:
                _context.next = 1;
                break;

              case 6:
                this.lock = true;

              case 7:
                op = getOperation(option);

                if (!this._operationMap[op]) {
                  _context.next = 14;
                  break;
                }

                _context.next = 11;
                return this._operationMap[op](path, value);

              case 11:
                rtn = _context.sent;

                if (this.useLock) {
                  this.lock = false;
                }
                return _context.abrupt('return', rtn);

              case 14:
                throw 'not implemented option: ' + op;

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function set(_x2, _x3, _x4) {
        return _ref.apply(this, arguments);
      }

      return set;
    }()
  }, {
    key: 'get',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(path) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', undefined);

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function get(_x5) {
        return _ref2.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: 'update',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(path, value) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt('return', undefined);

              case 1:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function update(_x6, _x7) {
        return _ref3.apply(this, arguments);
      }

      return update;
    }()
  }, {
    key: 'incr',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(path, value) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt('return', undefined);

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function incr(_x8, _x9) {
        return _ref4.apply(this, arguments);
      }

      return incr;
    }()
  }, {
    key: 'decr',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(path, value) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt('return', undefined);

              case 1:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function decr(_x10, _x11) {
        return _ref5.apply(this, arguments);
      }

      return decr;
    }()
  }, {
    key: 'push',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(path, item) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt('return', undefined);

              case 1:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function push(_x12, _x13) {
        return _ref6.apply(this, arguments);
      }

      return push;
    }()
  }, {
    key: 'unshift',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(path, item) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt('return', undefined);

              case 1:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function unshift(_x14, _x15) {
        return _ref7.apply(this, arguments);
      }

      return unshift;
    }()
  }, {
    key: 'splice',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(path, args) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt('return', undefined);

              case 1:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function splice(_x16, _x17) {
        return _ref8.apply(this, arguments);
      }

      return splice;
    }()
  }, {
    key: 'getOriginalHandles',
    value: function getOriginalHandles() {
      var _this2 = this;

      var isNumber = function isNumber(x) {
        return typeof x == 'number';
      };
      var checkMap = {
        incr: [isNumber, 0],
        decr: [isNumber, 0],
        push: [Array.isArray, []],
        unshift: [Array.isArray, []],
        splice: [Array.isArray, []]
      };

      var _operationMap = {
        set: function () {
          var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(path, v) {
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    return _context9.abrupt('return', _this2.update(path, v));

                  case 1:
                  case 'end':
                    return _context9.stop();
                }
              }
            }, _callee9, _this2);
          }));

          return function set(_x18, _x19) {
            return _ref9.apply(this, arguments);
          };
        }()
      };

      Object.keys(checkMap).map(function (method) {
        _operationMap[method] = function () {
          var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(path, v) {
            var _ref11, pass, value;

            return regeneratorRuntime.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.next = 2;
                    return _this2.checkPathType(path, checkMap[method][0], checkMap[method][1]);

                  case 2:
                    _ref11 = _context10.sent;
                    pass = _ref11.pass;
                    value = _ref11.value;

                    if (pass) {
                      _context10.next = 7;
                      break;
                    }

                    return _context10.abrupt('return', value);

                  case 7:
                    _context10.next = 9;
                    return _this2[method](path, v, value);

                  case 9:
                    return _context10.abrupt('return', _context10.sent);

                  case 10:
                  case 'end':
                    return _context10.stop();
                }
              }
            }, _callee10, _this2);
          }));

          return function (_x20, _x21) {
            return _ref10.apply(this, arguments);
          };
        }();
      });
      return _operationMap;
    }
  }, {
    key: 'checkPathType',
    value: function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(path, check, defaultValue) {
        var value, checkPass;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.get(path);

              case 2:
                value = _context11.sent;

                if (!(typeof value == 'undefined')) {
                  _context11.next = 5;
                  break;
                }

                return _context11.abrupt('return', {
                  value: defaultValue,
                  pass: true
                });

              case 5:
                _context11.next = 7;
                return (0, _fn2async2.default)(check, [value]);

              case 7:
                checkPass = _context11.sent;

                if (!checkPass) {
                  _context11.next = 10;
                  break;
                }

                return _context11.abrupt('return', {
                  value: value,
                  pass: true
                });

              case 10:
                return _context11.abrupt('return', {
                  value: value,
                  pass: false
                });

              case 11:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function checkPathType(_x22, _x23, _x24) {
        return _ref12.apply(this, arguments);
      }

      return checkPathType;
    }()
  }]);

  return Adapter;
}();

function getOperation(option) {
  var defaultOperation = _operations2.default.set;
  if (!option) {
    return defaultOperation;
  }
  if (typeof option == 'string') {
    if (isValid(option)) {
      return option;
    }
    return defaultOperation;
  }
  if (option.operation) {
    if (isValid(option.operation)) {
      return option.operation;
    }
    return defaultOperation;
  }
  return defaultOperation;

  function isValid(operation) {
    return _operations2.default[operation];
  }
}

exports.default = Adapter;